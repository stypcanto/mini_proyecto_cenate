// ========================================================================
// üè¢ API DE √ÅREAS - CENATE
// ========================================================================

import { API_BASE, getHeaders, handleResponse } from "../config/api";

/**
 * üìã Obtiene todas las √°reas
 */
export const getAreas = async () => {
  try {
    const response = await fetch(`${API_BASE}/areas`, {
      method: "GET",
      headers: getHeaders(true),
    });
    return await handleResponse(response);
  } catch (error) {
    console.error("‚ùå Error obteniendo √°reas:", error.message);
    throw new Error("No se pudieron cargar las √°reas");
  }
};

/**
 * üîç Obtiene un √°rea por su ID
 * @param {number|string} id - Identificador del √°rea
 */
export const getAreaById = async (id) => {
  try {
    const response = await fetch(`${API_BASE}/areas/${id}`, {
      method: "GET",
      headers: getHeaders(true),
    });
    return await handleResponse(response);
  } catch (error) {
    console.error(`‚ùå Error obteniendo √°rea con ID ${id}:`, error.message);
    throw new Error("No se pudo obtener la informaci√≥n del √°rea");
  }
};

/**
 * ‚ûï Crea una nueva √°rea
 * @param {Object} areaData - Datos de la nueva √°rea
 */
export const createArea = async (areaData) => {
  try {
    const response = await fetch(`${API_BASE}/areas`, {
      method: "POST",
      headers: getHeaders(true),
      body: JSON.stringify(areaData),
    });
    return await handleResponse(response);
  } catch (error) {
    console.error("‚ùå Error creando nueva √°rea:", error.message);
    throw new Error("No se pudo crear el √°rea");
  }
};

/**
 * ‚úèÔ∏è Actualiza un √°rea existente
 * @param {number|string} id - ID del √°rea a actualizar
 * @param {Object} areaData - Datos actualizados
 */
export const updateArea = async (id, areaData) => {
  try {
    const response = await fetch(`${API_BASE}/areas/${id}`, {
      method: "PUT",
      headers: getHeaders(true),
      body: JSON.stringify(areaData),
    });
    return await handleResponse(response);
  } catch (error) {
    console.error(`‚ùå Error actualizando √°rea ${id}:`, error.message);
    throw new Error("No se pudo actualizar el √°rea");
  }
};

/**
 * üóëÔ∏è Elimina un √°rea existente
 * @param {number|string} id - ID del √°rea a eliminar
 */
export const deleteArea = async (id) => {
  try {
    const response = await fetch(`${API_BASE}/areas/${id}`, {
      method: "DELETE",
      headers: getHeaders(true),
    });
    return await handleResponse(response);
  } catch (error) {
    console.error(`‚ùå Error eliminando √°rea ${id}:`, error.message);
    throw new Error("No se pudo eliminar el √°rea");
  }
};