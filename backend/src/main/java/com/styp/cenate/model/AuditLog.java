package com.styp.cenate.model;
import lombok.Data;

import jakarta.persistence.*;
import lombok.*;
import java.time.LocalDateTime;

/**
 * üìú Entidad que registra acciones, errores y eventos relevantes del sistema.
 * Se usa para auditor√≠a de operaciones (login, logout, cambios, errores, etc.)
 */
@Entity
@Table(name = "audit_logs", indexes = {
        @Index(name = "idx_audit_usuario", columnList = "usuario"),
        @Index(name = "idx_audit_action", columnList = "action"),
        @Index(name = "idx_audit_fecha", columnList = "fecha_hora")
})
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Data
public class AuditLog {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /** üë§ Usuario que ejecut√≥ la acci√≥n */
    @Column(name = "usuario", nullable = false, length = 100)
    private String usuario;

    /** ‚öôÔ∏è Tipo de acci√≥n realizada (LOGIN, LOGOUT, CREATE_USER, etc.) */
    @Column(name = "action", nullable = false, length = 100)
    private String action;

    /** üß© M√≥dulo o componente donde se ejecut√≥ la acci√≥n */
    @Column(name = "modulo", length = 50)
    private String modulo;

    /** üìù Descripci√≥n detallada de la acci√≥n o error */
    @Column(name = "detalle", columnDefinition = "TEXT")
    private String detalle;

    /** üåê Direcci√≥n IP desde la que se ejecut√≥ la acci√≥n */
    @Column(name = "ip_address", length = 50)
    private String ipAddress;

    /** üíª Agente de usuario (navegador o aplicaci√≥n cliente) */
    @Column(name = "user_agent", columnDefinition = "TEXT")
    private String userAgent;

    /** üö® Nivel de severidad del evento (INFO, WARNING, ERROR, CRITICAL) */
    @Column(name = "nivel", length = 20)
    @Builder.Default
    private String nivel = "INFO";

    /** ‚úÖ Estado de ejecuci√≥n (SUCCESS, FAILURE, etc.) */
    @Column(name = "estado", length = 20)
    @Builder.Default
    private String estado = "SUCCESS";

    /** üïì Fecha y hora del evento */
    @Column(name = "fecha_hora", nullable = false)
    @Builder.Default
    private LocalDateTime fechaHora = LocalDateTime.now();

    /** ‚è± Duraci√≥n estimada de la acci√≥n (en milisegundos) */
    @Column(name = "duracion_ms")
    private Long duracionMs;

    /**
     * Inicializa valores por defecto antes de persistir
     */
    @PrePersist
    protected void onCreate() {
        if (fechaHora == null) fechaHora = LocalDateTime.now();
        if (nivel == null) nivel = "INFO";
        if (estado == null) estado = "SUCCESS";
    }
}
