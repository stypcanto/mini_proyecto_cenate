package com.styp.cenate.api.mbac;
import lombok.extern.slf4j.Slf4j;

import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import com.styp.cenate.dto.mbac.ModuloSistemaResponse;
import com.styp.cenate.dto.mbac.PaginaModuloResponse;
import com.styp.cenate.service.mbac.ModuloSistemaService;

import java.util.List;

/**
 * Controlador para la gesti√≥n de m√≥dulos y p√°ginas del sistema MBAC (Modular-Based Access Control).
 * Permite listar m√≥dulos, sus p√°ginas activas y buscar p√°ginas por ruta.
 *
 * @author CENATE Development Team
 * @version 1.3
 */
@Slf4j
@RestController
@RequestMapping("/api/mbac/modulos")
@RequiredArgsConstructor
@CrossOrigin(origins = {
        "http://localhost:3000",
        "http://localhost:5173",
        "http://10.0.89.239:5173"
})
public class ModuloSistemaController {

    private final ModuloSistemaService moduloService;

    // üîπ DTO simple para respuestas de error
    record ErrorResponse(String message) {}

    // =========================================================================================
    // üî∏ 1. Listar todos los m√≥dulos activos con sus p√°ginas y permisos
    // =========================================================================================
    @GetMapping
    public ResponseEntity<?> listarModulos() {
        try {
            log.info("üì¶ Listando todos los m√≥dulos MBAC...");
            
            List<ModuloSistemaResponse> modulos = moduloService.obtenerTodosLosModulos();
            
            if (modulos.isEmpty()) {
                return ResponseEntity.status(HttpStatus.NO_CONTENT)
                        .body(new ErrorResponse("No hay m√≥dulos registrados."));
            }
            
            return ResponseEntity.ok(modulos);
            
        } catch (Exception e) {
            log.error("‚ùå Error al listar m√≥dulos MBAC: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ErrorResponse("Error interno al listar los m√≥dulos."));
        }
    }

    // =========================================================================================
    // üî∏ 2. Listar p√°ginas activas por ID de m√≥dulo con sus permisos
    // =========================================================================================
    @GetMapping("/{id}/paginas")
    public ResponseEntity<?> listarPaginasPorModulo(@PathVariable Integer id) {
        try {
            log.info("üìÑ Listando p√°ginas activas del m√≥dulo ID {}", id);
            
            List<PaginaModuloResponse> paginas = moduloService.obtenerPaginasPorModulo(id);
            
            if (paginas.isEmpty()) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                        .body(new ErrorResponse("No se encontraron p√°ginas activas para este m√≥dulo."));
            }
            
            return ResponseEntity.ok(paginas);
            
        } catch (Exception e) {
            log.error("‚ùå Error al listar p√°ginas del m√≥dulo {}: {}", id, e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ErrorResponse("Error interno al listar las p√°ginas del m√≥dulo."));
        }
    }

    // =========================================================================================
    // üî∏ 3. Buscar p√°gina por ruta (ej: /roles/admin/personal)
    // =========================================================================================
    @GetMapping("/buscar")
    public ResponseEntity<?> buscarPaginaPorRuta(@RequestParam String ruta) {
        try {
            log.info("üîç Buscando p√°gina por ruta: {}", ruta);
            
            return moduloService.buscarPaginaPorRuta(ruta)
                    .<ResponseEntity<?>>map(ResponseEntity::ok)
                    .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND)
                            .body(new ErrorResponse("No se encontr√≥ una p√°gina con la ruta especificada.")));
                            
        } catch (Exception e) {
            log.error("‚ùå Error al buscar p√°gina por ruta {}: {}", ruta, e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ErrorResponse("Ha ocurrido un error interno al buscar la p√°gina por ruta."));
        }
    }
}
